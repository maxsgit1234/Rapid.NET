<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rapid.NET</name>
    </assembly>
    <members>
        <member name="T:Rapid.NET.ScriptAttribute">
            <summary>
            Annotate your Script class with this attribute in order to declare 
            that it can be run as a script. Your script class will also need to
            add a "public static void Run(...);" with either 0 or 1 arguments
            in order to be executed as a script.
            </summary>
        </member>
        <member name="T:Rapid.NET.DocumentationAttribute">
            <summary>
            Annotate your script class, or any field of your Run(...) method's
            input argument with this attribute to display documentation in the
            script-launcher UI.
            </summary>
        </member>
        <member name="M:Rapid.NET.ScriptMethods.RunFromArgs(System.String[],System.Action{System.Collections.Generic.List{Rapid.NET.Script}},System.Func{System.String,System.String},System.Reflection.Assembly)">
            <summary>
            Executes your script's Run(...) method given the input command 
            line arguments. Usage information:
             - If args has length 0, the runUI() delegate will be invoked.
             - If the first argument in wrapped in square brackets "[...]",
               then it is taken to be the name of an attribute to use to filter
               potential scripts from the input assembly.
             - Otherwise, the first (or next) argument is taken to be the name
               of a script to execute, if found in the input assembly.
             - If there is a subsequent argument, it is interpreted as an 
               argument to be supplied to the Run(...) method of your script.
               If the argument is a filename, the file is read as JSON and 
               converted to an object. Otherwise, the argument is interpreted
               as JSON text itself.
            
            </summary>
            <param name="args">See summary for usage notes.</param>
            <param name="runUI">A method to be called to launch a UI to 
            manually select a script to execute, if no arguments are supplied.</param>
            <param name="readJsonFile">A method to search for and read a file 
            containing JSON text representing the input arguments to supply 
            to your script's Run(...) method.</param>
            <param name="assy">An assembly to search for your script classes.</param>
        </member>
        <member name="M:Rapid.NET.ScriptMethods.ListFromAssemblies(System.Reflection.Assembly[],System.String)">
            <summary>
            Find scripts defined in any of the specified assemblies.
            </summary>
            <param name="assemblies"></param>
            <param name="attributeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Rapid.NET.ScriptMethods.RunDirect(System.String[],System.Collections.Generic.List{Rapid.NET.Script},System.Func{System.String,System.String})">
            <summary>
            Run the script specified in args. Look for its class definition
            from among the input list of scripts.
            </summary>
            <param name="args">The first argument is the name of the script. 
            The rest are passed into the execution of the script itself.</param>
            <param name="scripts"></param>
            <param name="readJsonFile"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Rapid.NET.ScriptMethods.ListFromAssembly(System.Reflection.Assembly,System.Type)">
            <summary>
            Enumerates all valid script classes defined in the supplied assembly.
            </summary>
            <param name="assembly">An assembly to search for your script classes.</param>
            <param name="attType">If non-null, the type of an attribute to use 
            to filter your set of scripts. Only script classes with this 
            attribute applied will be listed.</param>
            <returns></returns>
        </member>
        <member name="M:Rapid.NET.ScriptMethods.ListFromAssembly(System.Reflection.Assembly,System.String)">
            <summary>
            Find script-classes defined in the specified assembly.
            </summary>
            <param name="assembly"></param>
            <param name="attributeFilter"></param>
            <returns></returns>
        </member>
    </members>
</doc>
